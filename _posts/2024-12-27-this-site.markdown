---
layout: post
title:  This Website
categories: projects
excerpt: "Lessons learned while creating this website" 
---
<p>This site was created as a place where I could showcase projects that I've worked on, but it ended up being a project all its own! I am not a front-end person, but because of what I'm learning through this process, I've started to become fairly comfortable in this environment.</p>
<br>
<ol>
<a href="#github"><li>GitHub Pages</li></a>
<a href="#jekyll"><li>Jeykyll</li></a>
<a href="#contact"><li>Contact Form</li></a>
<a href="#google"><li>Google Analytics</li></a>
<a href="#cheerpj"><li>Cheerpj and Logisim</li></a>
</ol>

<div id="github" class="section-link">
<h2>GitHub Pages</h2>
<p>My plain old GitHub repository was pretty bland and I wanted something that would both stand out to potential employers and be a little easier on the eyes when referencing my own pages, so I decided to use GitHub Pages to make a nicer looking website. GitHub Pages supports using the Jekyll site generation framework, so I set up a <a href="https://github.com/tlkroll/tlkroll.github.io" target="_blank">repository</a> for this page and chose the <a href="https://github.com/pages-themes/midnight" target="_blank">Midnight</a> theme to work with. I forked the theme's repository, edited the CSS a bit to suit my tastes (those ugly green buttons had to go), and started creating content. Git was, and remains, a bit frustrating to deal with at times, but now that I have a rhythm for everything this setup is extremely easy to manage.</p>
</div>

<div id="jekyll" class="section-link">
<h2>Jekyll</h2>
<p>There was a bit of a learning curve with Jekyll, but it's a great tool for automating front end code after the initial setup is complete. As an example, Jekyll uses what they call "front matter", which is a small header at the top of the markdown files for posts like the one I'm writing right now. Here you can see what the front matter looks like for this file:</p>
<img src="/images/front-matter.png">
<p>Using the category tag allows the different pages of my website to be automatically populated with the correct posts as soon as I create a new file. Here is an example of the projects page:</p>
<img src="/images/projects-markdown.png">
<p>How cool is that?? Jekyll definitely made life easy for this project.
</div>

<div id="contact" class="section-link">
<h2>Contact Form</h2>
<p>Originally, I just used a mailto link for my email even though I knew it was susceptible to scraping and that I would end up receiving spam and phishing emails because of this. That would have been a terrible example for a website focused on cybersecurity, so I did a bit of research and found Formspree. This site offers a simple, free contact form which forwards information to my personal email and it even includes free spam filtering. Unfortunately you have to pay for things like a custom redirect page but not too bad for a free service!</p>
</div>

<div id="google" class="section-link">
<h2>Google Analytics</h2>
<p>I have mixed feelings about including anything from Google on my website, but I really wanted to see what kind of traffic I was receiving and monitoring the behavior of that traffic should be a good way to guide any future development or promotion. This was a fairly simple process, especially with Jekyll. All I had to do was sign up for a free Google Analytics account and replace the contents of my <b>head-custom-google-analytics.html</b> file with the code snippet from my Google Analytics page. Now you're being stalked by Google on every inch of my website &#128521;</p>
</div>

<div id="cheerpj" class="section-link">
<h2>Cheerpj and Logisim</h2>
<p>This turned out to be kind of a big project. I wanted to do more than just show screenshots of my projects and explain them - I wanted the projects to be interactive. I found Cheerpj, which was a great way to host Java programs in the browser, but then I needed to run Logisim. By itself, Logisim ran fine, but in order for it to load my assignment, I had to modify the source code within the JAR file. Although I had three different Java courses in school, we learned nothing about JARs. There was a filesToOpen array which loaded files at startup, but it would not add my file and I could not figure out why. Through Stack Overflow, I learned that files referenced within a JAR are resources and not files.</p> 

<p>So in order to load my project file, I had to first convert the resource object to a file object:<br>
<br>
<img src="/images/getResourceAsFile.png">
</p>

 <p>Then, I had to add a couple lines of code to add it into the filesToOpen array in the source. Once the file is in this array, Logisim will load it on startup:<br>
 <br>
 <img src="/images/assignment-circ.png">
 </p>

<p>I learned a lot from this seemingly small project! If you would like to see the source for yourself, you can visit the repository <a href="https://github.com/tlkroll/logisim" target="_blank">here</a></p>
</div>